{"./":{"url":"./","title":"Introduction","keywords":"","body":" gitbook(hycPEXM) for notes1. issue1.1. chapter numbering1.2. gitbook install [mathjax/mathjax-pro] gitbook(hycPEXM) for notes gitbook for Github Pages(https://hycpexm.github.io/gitbook/) gitbook init gitbook install book sm: would replace 'space' with %20... 若文件名中带有空格，在SUMMARY.md里会把第一个出现的d空格转换成%20，此外若文件名含'-'这种特殊字符，在SUMMARY.md里无法正确地生成它，所以还需手动修改SUMMARY.md，以保证整个目录结构的正确；还有就是用完这个命令就不要再运行gitbook init了，否则生成错误的文件还得一个个删 gitbook serve 1. issue 1.1. chapter numbering \"theme-default\": { \"showLevel\": true } } 为什么每一章的起始编号都是1？ 1.2. gitbook install [mathjax/mathjax-pro] 报错： info: install plugin \"mathjax-pro\" (*) from NPM with version 0.0.6 fetchMetadata -> 304 / |#############################################-----------------------------------------------------------------------------------------------------------------| C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\node_modules\\aproba\\index.js:25 if (args[ii] == null) throw missingRequiredArg(ii) ^ Error: Missing required argument #1 at andLogAndFinish (C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\fetch-package-metadata.js:31:3) at fetchPackageMetadata (C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\fetch-package-metadata.js:51:22) at resolveWithNewModule (C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\install\\deps.js:490:12) at C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\install\\deps.js:491:7 at C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\node_modules\\iferr\\index.js:13:50 at C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\fetch-package-metadata.js:37:12 at addRequestedAndFinish (C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\fetch-package-metadata.js:67:5) at returnAndAddMetadata (C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\fetch-package-metadata.js:121:7) at pickVersionFromRegistryDocument (C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\lib\\fetch-package-metadata.js:138:20) at C:\\Users\\hyc\\.gitbook\\versions\\3.2.3\\node_modules\\npm\\node_modules\\iferr\\index.js:13:50 { code: 'EMISSINGARG' } 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"AI/":{"url":"AI/","title":"AI","keywords":"","body":" AI AI 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"C&CPP/":{"url":"C&CPP/","title":"C/CPP","keywords":"","body":" C/C++ C/C++ 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"CS/":{"url":"CS/","title":"CS","keywords":"","body":" CS CS 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"English/":{"url":"English/","title":"English","keywords":"","body":" English English English_notes 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"English/useful phrases and technical term.html":{"url":"English/useful phrases and technical term.html","title":"Useful Phrases And Technical Term","keywords":"","body":" mathematics precede vs follow vs prefix CS1. Troubleshooting vs Debugging mathematics two raised to the power of the bit position : 2bit position 2^{\\text{bit position}} 2bit position numerator 分子 denominator分母 delimiter 分隔符，定界符 precede vs follow vs prefix A precedes B. B precedes C. / A comes before B. B comes before C. B follows A. C follows B. / B comes after A. C comes after B. B is preceded by A. C is preceded by B. A is followed by B. B is followed by C. Therefore, precedes = is followed by follows = is preceded by prefixed with 以。。。为前缀 CS Computer programmers are bombarded with jargon and terminology. be bombarded with jargon: 行话 1. Troubleshooting vs Debugging Troubleshooting vs Debugging: What’s the Difference & Best Practices – Stackify As already mentioned, debugging is considered a subset of troubleshooting. However, troubleshooting does not always entail solving the problem at that moment in time. There may be procedural constraints or workflow protocols that prevent the issue from being solved immediately. Debugging, on the other hand, is meant to discover and fix a problem all in the same session, whenever possible. People often use the two terms interchangeably, which can add to the confusion. 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"Git/":{"url":"Git/","title":"Git","keywords":"","body":" Git Git 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"Linux/":{"url":"Linux/","title":"Linux","keywords":"","body":" Linux Linux linux_notes 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"Linux/1. test.html":{"url":"Linux/1. test.html","title":"1. test","keywords":"","body":" Test1. Linux Device Driver : an example for testing syntax highlighting2. testing image3. testing math equations Test 1. Linux Device Driver : an example for testing syntax highlighting #include #include #include #include /* for put_user */ //copy_to_user /* //自定义初始化和退出 int my_init(void); void my_exit(void); module_init(my_init); module_exit(my_exit); */ int init_module(void) { //注册 int register_chrdev(unsigned int major, const char *name, struct file_operations *fops); unsigned Major = register_chrdev(0, DEVICE_NAME, &fops); //0代表由系统自动分配主设备号， //否则给出一个正整数就表示主设备号 } void cleanup_module(void) { int unregister_chrdev(unsigned int major, const char *name); } int device_open(struct inode *, struct file *); int device_release(struct inode *, struct file *); ssize_t device_read(struct file *, char *, size_t, loff_t *); ssize_t device_write(struct file *, const char *, size_t, loff_t *); long device_ioctl(struct file *, unsigned int, unsigned long); /* unsigned long copy_to_user(void __user *to,const void *from,unsigned long count); //将数据从内核拷贝至用户空间，用于read操作 unsigned long copy_from_user(void *to,const void __user *from,unsigned long count); //将数据从用户空间拷贝到内核中，用于write操作 */ struct file_operations fops = { read: device_read, write: device_write, open: device_open, release: device_release, unlocked_ioctl: device_ioctl }; 2. testing image 3. testing math equations ℏb‾⋅ε‾888‾dddd\r \r \\frac{\\hbar \\underline{b} \\, \\cdot \\,\\overline{\\varepsilon} }{ \\underline{888} dddd}\r \r 888​ddddℏb​⋅ε​ ℏb‾⋅ε‾888‾dddd\\frac{\\hbar \\underline{b} \\, \\cdot \\,\\overline{\\varepsilon} }{ \\underline{888} dddd}888​ddddℏb​⋅ε​ ..................... 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 04:32:43 "},"Mathematica/":{"url":"Mathematica/","title":"Mathematica","keywords":"","body":" Mathematica Mathematica 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"Matlab/":{"url":"Matlab/","title":"Matlab","keywords":"","body":" MATLAB MATLAB 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"Python/":{"url":"Python/","title":"Python","keywords":"","body":" Python Python 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"Weekly Reports/":{"url":"Weekly Reports/","title":"Weekly Reports","keywords":"","body":" 周报 周报 每两周记录一次 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"Weekly Reports/2022年/2022-01-09.html":{"url":"Weekly Reports/2022年/2022-01-09.html","title":"2022-01-09","keywords":"","body":"1. 前两周目标2. 工作内容2.1. 踩坑耽误好多时间3. 后两周目标1. 前两周目标 完成最后一项期末大作业和最后两份近代物理实验报告 linux系统编程网课学到父子进程gdb调试88/187 操作系统网课研究一下绪论部分的实验项目 数据结构继续学习搜索树 抽空复习模电、数电 2. 工作内容 linux系统编程网课学到父子进程gdb调试82/187 主要内容有： 目录操作函数：opendir(), closedir(),readdir()... 用函数调用的方式来实现ls -R的功能... dup(),dup2() 关于进程（PCB进程控制块）、虚拟内存和物理内存映射关系、环境变量、fork函数...的概念与原理 学习了git与github的基本操作与命令，比如git fetch/ pull/ add/ commit /push/ log等。上传了一些文件到我的GitHub仓库，创建了Github Pages个人主页，目前个人主页还很不完善，需等以后慢慢改善。 创建Github Pages个人主页耽误了我很多时间，因为配置过程中遇到了很多软件相关的bug，记录在踩坑耽误好多时间，我这么做其实偏离了我工作的主要主线，所以这是我的不对。此外，复习考试、期末大作业（还没搞定）也花了我不少时间，所以这两周进展还是比较慢的。 后续周报可能就以这种在线网页的形式来发布。 2.1. 踩坑耽误好多时间 GitHub Page配置jekyll相关主题时，安装的ruby不能是最近的几个版本，需要是2.7或之前的版本，不然版本不匹配，会出现各种问题。而且还要按照官方的说明Dependency versions | GitHub Pages来安装相关软件包。在选择jekyll主题fork到自己的仓库下，并配置到github.io时，也会出现很多小问题，导致网页无法正常显示，尝试修改.js，.css，.html也无法解决。 将gitbook配置到Github Page上去时，安装的node.js也不能是最近的几个版本，经试验和查资料应该是要12开头的版本或之前的；但有时还是会遇到版本不匹配问题，这时候还得修改.js等源文件；此外，gitbook实际使用时，mathjax插件无法安装成功，网上也没有相关的帖子，至今没有解决。 官方似乎已经不维护gitbook-cli及插件了，所以使用gitbook时会出现很多小bug，很难解决，网上也很少能找到相关资料。 以后可能就会尝试转向notion，语雀，wolai这样的共享云文档来做记录了，或者直接用国内的博客网站。应该会比我现在用的方法方便很多。 3. 后两周目标 linux系统编程网课学到99/187：waitpid回收多个子进程 阅读生物物理相关文献，学习相关知识和技能，准备开题报告 操作系统网课研究一下绪论部分的实验项目：控制系统启动，添加系统调用 数据结构继续学习搜索树 抽空复习模电、数电 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:45 "},"嵌入式/":{"url":"嵌入式/","title":"嵌入式","keywords":"","body":" 嵌入式 嵌入式 使用知识共享 署名-相同方式共享 4.0协议发布            updated 2022-01-10 03:56:46 "}}